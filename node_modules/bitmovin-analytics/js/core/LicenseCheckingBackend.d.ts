import { DeferredLicenseLoadingAdapterAPI } from '../adapters/internal/DeferredLicenseLoadingAdapterAPI';
import { AdAnalyticsSample } from '../types/AdAnalyticsSample';
import { AdBreakSample } from '../types/AdBreakSample';
import { AdSample } from '../types/AdSample';
import { AuthenticationCallback } from '../types/AuthenticationCallback';
import { LicenseCallFunc, LicensingRequest, LicensingResponse } from '../types/LicensingRequest';
import { Sample } from '../types/Sample';
import { Backend } from './Backend';
export declare class LicenseCheckingBackend implements Backend {
    private licenseCall;
    private backendBaseUrl;
    private adapter;
    private authenticationCallback;
    promise?: Promise<LicensingResponse>;
    private licenseLazyLoadingTimeoutHandle?;
    private backend;
    private info;
    constructor(info: LicensingRequest, licenseCall: LicenseCallFunc, backendBaseUrl: string, adapter: DeferredLicenseLoadingAdapterAPI, authenticationCallback: AuthenticationCallback);
    performLicenseCheck(): Promise<LicensingResponse>;
    sendRequest(sample: Sample): void;
    sendUnloadRequest(sample: Sample): void;
    sendRequestSynchronous(sample: Sample): void;
    sendAdRequest(sample: AdSample & AdBreakSample & AdAnalyticsSample): void;
    private licenseKeyReceived;
    private licenseCallFailed;
    private licenseLazyLoadingTimeout;
    private unsubscribeFromAdapter;
    private wrapLicenseCheckPromiseWithCallback;
}
