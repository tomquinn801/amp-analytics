import { EventMap } from '../enums/Event';
import { VideoStartFailedReason } from '../enums/VideoStartFailedReason';
import { AnalyticsStateMachineOptions } from '../types/AnalyticsStateMachineOptions';
import * as ErrorData from '../types/EventData';
import { NoExtraProperties } from '../types/NoExtraProperties';
import { StateMachineCallbacks } from '../types/StateMachineCallbacks';
export declare abstract class AnalyticsStateMachine {
    protected stateMachineCallbacks: StateMachineCallbacks;
    protected stateMachine: StateMachine.StateMachine & {
        [key: string]: any;
    };
    protected onEnterStateTimestamp: number;
    protected readonly videoStartupTimeoutMs: number;
    protected readonly rebufferTimeoutMs: number;
    private rebufferingHeartbeatIntervalHandle?;
    private currentRebufferingIntervalIndex;
    private rebufferingTimeoutHandle?;
    private videoStartTimeout?;
    constructor(stateMachineCallbacks: StateMachineCallbacks, opts: AnalyticsStateMachineOptions);
    abstract createStateMachine(opts: AnalyticsStateMachineOptions): StateMachine.StateMachine;
    abstract callEvent<StatemachineEvent extends keyof EventMap, EventData extends EventMap[StatemachineEvent]>(eventType: StatemachineEvent, eventObject: NoExtraProperties<EventMap[StatemachineEvent], EventData>, timestamp: number): void;
    abstract sourceChange(config: any, timestamp: number, currentTime?: number): void;
    get currentState(): string;
    resetIntervals(): void;
    protected startRebufferingHeartbeatInterval(reset?: boolean): void;
    protected resetRebufferingHelpers(reset?: boolean): void;
    protected clearRebufferingHeartbeatHandle(): void;
    protected startRebufferingTimeoutHandle(): void;
    protected clearRebufferingTimeoutHandle(reset: boolean): void;
    protected getVideoStartupFailedEventData(currentTime: number, event?: string, eventObject?: any): ErrorData.VideoStartFailedEvent;
    protected getReasonForVideoStartFailure(event?: string): VideoStartFailedReason;
    protected setVideoStartTimeout(): void;
    protected clearVideoStartTimeout(): void;
}
