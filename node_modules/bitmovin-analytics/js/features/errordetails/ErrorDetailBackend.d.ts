import { CollectorConfig } from '../../types/AnalyticsConfig';
import { HttpRequest } from '../httprequesttracking/HttpRequest';
import { ErrorData } from './ErrorData';
import { ErrorDetail } from './ErrorDetail';
export declare class ErrorDetailBackend {
    get queue(): ReadonlyArray<ErrorDetail>;
    get enabled(): boolean;
    set enabled(value: boolean);
    static copyErrorDetailTruncateStringsAndUrls(errorDetail: ErrorDetail, maxStringLength: number, maxUrlLength: number): ErrorDetail;
    static copyHttpRequestTruncateUrls(httpRequest: HttpRequest, maxLength: number): HttpRequest;
    static copyErrorDataTruncateStrings(errorData: ErrorData, maxStringLength: number): ErrorData;
    static copyErrorDetailTruncateHttpRequests(errorDetail: ErrorDetail, maxRequests: number): ErrorDetail;
    private static MAX_URL_LENGTH;
    private static MAX_STRING_LENGTH;
    private readonly backendUrl;
    private readonly _queue;
    private _enabled;
    constructor(collectorConfig: CollectorConfig | undefined);
    limitHttpRequestsOfQueuedErrorDetails(max: number): void;
    send(errorDetail: ErrorDetail): void;
    flush(): void;
    clear(): void;
    private removeFromQueue;
}
