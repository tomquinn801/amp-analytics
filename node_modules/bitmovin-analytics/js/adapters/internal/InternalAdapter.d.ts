import { AnalyticsStateMachine } from '../../analyticsStateMachines/AnalyticsStateMachine';
import { EventDispatcher } from '../../core/EventDispatcher';
import { Event, EventMap } from '../../enums/Event';
import { AnalyticsStateMachineOptions } from '../../types/AnalyticsStateMachineOptions';
import { CustomDataValues } from '../../types/CustomDataValues';
import { DownloadSpeedInfo } from '../../types/DownloadSpeedInfo';
import { DrmPerformanceInfo } from '../../types/DrmPerformanceInfo';
import { NoExtraProperties } from '../../types/NoExtraProperties';
import { SegmentInfo } from '../../types/SegmentInfo';
import { StateMachineCallbacks } from '../../types/StateMachineCallbacks';
export declare abstract class InternalAdapter {
    stateMachineCallbacks: StateMachineCallbacks;
    protected stateMachine: AnalyticsStateMachine;
    protected opts: AnalyticsStateMachineOptions;
    protected _onLicenseKeyReceived: EventDispatcher<{
        licenseKey: string;
    }>;
    protected _onLicenseCallFailed: EventDispatcher<{}>;
    protected drmPerformanceInfo: DrmPerformanceInfo | undefined;
    protected previousVideoBitrate: number;
    protected previousAudioBitrate: number;
    protected qualityChangeCount: number;
    protected abstract get currentTime(): number;
    get onLicenseKeyReceived(): EventDispatcher<{
        licenseKey: string;
    }>;
    get onLicenseCallFailed(): EventDispatcher<{}>;
    get downloadSpeedInfo(): DownloadSpeedInfo;
    get segments(): SegmentInfo[];
    constructor(opts?: AnalyticsStateMachineOptions);
    release(): void;
    eventCallback: <StatemachineEvent extends Event, EventData extends EventMap[StatemachineEvent]>(eventType: StatemachineEvent, eventObject: NoExtraProperties<EventMap[StatemachineEvent], EventData>) => void;
    getCommonPlaybackInfo(): {
        screenHeight: number;
        screenWidth: number;
    };
    clearValues(): void;
    clearSegments(): void;
    increaseQualityChangeCount(): void;
    resetQualityChangeCount(): void;
    resetSourceRelatedState(): void;
    isQualityChangeEventEnabled(): boolean;
    setCustomData(values: CustomDataValues): void;
    protected shouldAllowVideoQualityChange(newBitrate: number | undefined): boolean;
    protected setPreviousVideoBitrate(newBitrate: number): void;
    protected shouldAllowAudioQualityChange(newBitrate: number | undefined): boolean;
    protected setPreviousAudioBitrate(newBitrate: number): void;
}
