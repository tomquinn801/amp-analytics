import { PlayerAPI } from 'bitmovin-player';
import { Analytics } from '../../core/Analytics';
import VideoCompletionTracker from '../../core/VideoCompletionTracker';
import { Player } from '../../enums/Player';
import { Feature } from '../../features/Feature';
import { FeatureConfig } from '../../features/FeatureConfig';
import { AnalyticsStateMachineOptions } from '../../types/AnalyticsStateMachineOptions';
import { DownloadSpeedInfo } from '../../types/DownloadSpeedInfo';
import { DrmPerformanceInfo } from '../../types/DrmPerformanceInfo';
import { FeatureConfigContainer } from '../../types/FeatureConfigContainer';
import { PlaybackInfo } from '../../types/PlaybackInfo';
import { SegmentInfo } from '../../types/SegmentInfo';
import { AdModuleAPI } from './ads/AdModuleAPI';
import { InternalAdapter } from './InternalAdapter';
import { InternalAdapterAPI } from './InternalAdapterAPI';
export declare class Bitmovin8InternalAdapter extends InternalAdapter implements InternalAdapterAPI {
    private player;
    get downloadSpeedInfo(): DownloadSpeedInfo;
    get segments(): SegmentInfo[];
    get adModule(): AdModuleAPI | undefined;
    get supportsDeferredLicenseLoading(): boolean;
    readonly videoCompletionTracker: VideoCompletionTracker;
    private onBeforeUnLoadEvent;
    private speedMeter;
    private segmentTracker;
    private _adModule?;
    private lastTrackedCurrentTime;
    private httpRequestTrackingAdapter;
    constructor(player: PlayerAPI, opts?: AnalyticsStateMachineOptions);
    protected get currentTime(): number;
    initialize(analytics: Analytics): Array<Feature<FeatureConfigContainer, FeatureConfig>>;
    clearValues(): void;
    clearSegments(): void;
    getPlayerVersion: () => string;
    getPlayerName: () => Player;
    getPlayerTech: () => import("bitmovin-player").PlayerType;
    getAutoPlay(): boolean;
    getDrmPerformanceInfo: () => DrmPerformanceInfo | undefined;
    getCurrentPlaybackInfo(): PlaybackInfo;
    register(): void;
    sourceChange(config: any, timestamp: any): void;
    onError(): void;
    private applySourceProperties;
    private applySubtitleProperties;
    private applyPlaybackQualityProperties;
    private applyCastingProperties;
    private allowSeeking;
}
