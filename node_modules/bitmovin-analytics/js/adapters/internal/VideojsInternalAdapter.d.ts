/// <reference types="video.js" />
import { Analytics } from '../../core/Analytics';
import VideoCompletionTracker from '../../core/VideoCompletionTracker';
import { Player } from '../../enums/Player';
import { Feature } from '../../features/Feature';
import { FeatureConfig } from '../../features/FeatureConfig';
import { AnalyticsStateMachineOptions } from '../../types/AnalyticsStateMachineOptions';
import { DrmPerformanceInfo } from '../../types/DrmPerformanceInfo';
import { FeatureConfigContainer } from '../../types/FeatureConfigContainer';
import { PlaybackInfo } from '../../types/PlaybackInfo';
import { QualityLevelInfo } from '../../types/QualityLevelInfo';
import { StreamSources } from '../../types/StreamSources';
import { InternalAdapter } from './InternalAdapter';
import { InternalAdapterAPI } from './InternalAdapterAPI';
export declare class VideojsInternalAdapter extends InternalAdapter implements InternalAdapterAPI {
    private player;
    readonly videoCompletionTracker: VideoCompletionTracker;
    private _subtitleInfo;
    private selectedAudioLanguage?;
    private onBeforeUnLoadEvent;
    private previousTime;
    constructor(player: videojs.default.Player, opts?: AnalyticsStateMachineOptions);
    initialize(analytics: Analytics): Array<Feature<FeatureConfigContainer, FeatureConfig>>;
    getPlayerVersion: () => any;
    getPlayerName: () => Player;
    getPlayerTech: () => string;
    getAutoPlay: () => boolean;
    getDrmPerformanceInfo: () => DrmPerformanceInfo | undefined;
    getStreamType(url: string): string | undefined;
    getStreamSources(url: string): StreamSources;
    getCurrentPlaybackInfo(): PlaybackInfo;
    getCurrentQualityLevelInfo(): QualityLevelInfo | null;
    register(): void;
    sourceChange(config: any, timestamp: number): void;
    protected get currentTime(): number;
    private getSelectedAudioTrackLanguage;
    private getSubtitleInfo;
}
