import { Subscribable } from '../../core/EventDispatcher';
import { CollectorConfig } from '../../types/AnalyticsConfig';
import { FeatureConfigContainer } from '../../types/FeatureConfigContainer';
import { Feature } from '../Feature';
import { HttpRequestTracking } from '../httprequesttracking/HttpRequestTracking';
import { ErrorDetailBackend } from './ErrorDetailBackend';
import { ErrorDetailTrackingConfig } from './ErrorDetailTrackingConfig';
import { OnErrorDetailEventObject } from './OnErrorDetailEventObject';
export interface ErrorDetailTrackingSettingsProvider {
    readonly licenseKey: string;
    readonly domain: string;
    readonly impressionId: string;
    readonly collectorConfig?: CollectorConfig;
}
export declare class ErrorDetailTracking extends Feature<FeatureConfigContainer, ErrorDetailTrackingConfig> {
    private settingsProvider;
    private backend;
    private subscribables;
    private httpRequestTracking;
    private errorIndex;
    constructor(settingsProvider: ErrorDetailTrackingSettingsProvider, backend: ErrorDetailBackend, subscribables: Array<Subscribable<OnErrorDetailEventObject>>, httpRequestTracking: HttpRequestTracking | undefined);
    reset(): void;
    enabled(): void;
    disabled(): void;
    configured(authenticated: boolean, config?: ErrorDetailTrackingConfig): void;
    extractConfig(configContainer: FeatureConfigContainer): ErrorDetailTrackingConfig | undefined;
    private onErrorHandler;
}
