import { InternalAdapterAPI } from '../adapters/internal/InternalAdapterAPI';
import { ErrorDetailTrackingSettingsProvider } from '../features/errordetails/ErrorDetailTracking';
import { OnErrorDetailEventObject } from '../features/errordetails/OnErrorDetailEventObject';
import { AnalyticsConfig } from '../types/AnalyticsConfig';
import { CastClientConfig } from '../types/CastClientConfig';
import { CustomDataValues } from '../types/CustomDataValues';
import { Sample } from '../types/Sample';
import { Backend } from './Backend';
import { BackendFactory } from './BackendFactory';
import { Subscribable } from './EventDispatcher';
export declare class Analytics {
    get version(): string;
    static version: string;
    static LICENSE_CALL_PENDING_TIMEOUT: number;
    static PAGE_LOAD_TYPE_TIMEOUT: number;
    static CAST_RECEIVER_CONFIG_MESSAGE: string;
    pageLoadTime: number;
    playerStartupTime: number;
    videoStartupTime: number;
    autoplay: boolean | undefined;
    sample: Sample;
    backend: Backend;
    errorDetailTrackingSettingsProvider: ErrorDetailTrackingSettingsProvider;
    get errorDetailSubscribable(): Subscribable<OnErrorDetailEventObject>;
    private config;
    private sessionHandler;
    private droppedSampleFrames;
    private startupTime;
    private adapter;
    private backendFactory;
    private resetQualityChangeCountIntervalId?;
    private featureManager;
    private onErrorDetailEventDispatcher;
    private authenticationCallback;
    constructor(config: AnalyticsConfig, adapter: InternalAdapterAPI, backendFactory?: BackendFactory);
    getPlayerInformationFromAdapter(): {
        player: string;
        version: string;
        playerTech: string;
    };
    updateSamplesToCastClientConfig(samples: Sample[], castClientConfig: CastClientConfig): void;
    updateSampleToCastClientConfig(sample: Sample, castClientConfig: CastClientConfig): void;
    init(): void;
    disable(): void;
    setConfigParameters(sample?: Sample, config?: AnalyticsConfig): void;
    generateNewImpressionId(): void;
    setUserId(): void;
    setupStateMachineCallbacks(): void;
    guardAgainstMissingVideoTitle: (oldConfig: AnalyticsConfig, newConfig: AnalyticsConfig) => void;
    guardAgainstMissingIsLive: (oldConfig: AnalyticsConfig, newConfig: AnalyticsConfig) => void;
    sourceChange: (config: AnalyticsConfig) => void;
    setCustomDataOnce: (values: CustomDataValues) => void;
    setCustomData: (values: CustomDataValues) => void;
    getCurrentImpressionId: () => string | undefined;
    setDuration(duration: number): void;
    setState(state: string): void;
    setPlaybackVideoPropertiesFromEvent(event: any): void;
    setPlaybackAudioPropertiesFromEvent(event: any): void;
    setPlaybackInfoFromAdapter(): void;
    setupSample(): Sample;
    sendAnalyticsRequest(): void;
    sendAnalyticsRequestAndClearValues(): void;
    sendUnloadRequest(): void;
    sendAnalyticsRequestSynchronous(): void;
    clearValues(): void;
    getIsLiveFromConfigOrPlaybackInfo(config: AnalyticsConfig, isLiveFromPlayback?: boolean): boolean;
    getMergedCollectorConfig(newConfig: AnalyticsConfig, oldConfig?: AnalyticsConfig): import("../types/AnalyticsConfig").CollectorConfig | undefined;
    getMergedAnalyticsConfig(newConfig: AnalyticsConfig, oldConfig?: AnalyticsConfig): AnalyticsConfig;
    /**
     * This method sanitizes the input and updates the analytics config.
     * @param values Object containing the customData and other fields
     */
    private changeCustomData;
    private buildDefaultAnalyticsConfigValues;
    private checkForErrorsInConfig;
    private getDomainFromConfig;
    private createBackend;
    private getDomain;
    private setCompletionValues;
    private sendQualityChange;
    private clearResetQualityChangeInterval;
}
