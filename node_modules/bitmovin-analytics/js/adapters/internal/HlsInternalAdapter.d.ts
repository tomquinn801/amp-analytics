/// <reference types="hls.js" />
import { Analytics } from '../../core/Analytics';
import { Player } from '../../enums/Player';
import { Feature } from '../../features/Feature';
import { FeatureConfig } from '../../features/FeatureConfig';
import { AnalyticsStateMachineOptions } from '../../types/AnalyticsStateMachineOptions';
import { DownloadSpeedInfo } from '../../types/DownloadSpeedInfo';
import { FeatureConfigContainer } from '../../types/FeatureConfigContainer';
import { PlaybackInfo } from '../../types/PlaybackInfo';
import { QualityLevelInfo } from '../../types/QualityLevelInfo';
import { HTML5InternalAdapter } from './HTML5InternalAdapter';
import { InternalAdapterAPI } from './InternalAdapterAPI';
export declare class HlsInternalAdapter extends HTML5InternalAdapter implements InternalAdapterAPI {
    private hls;
    get downloadSpeedInfo(): DownloadSpeedInfo;
    private speedMeter;
    constructor(hls: Hls, opts?: AnalyticsStateMachineOptions);
    initialize(analytics: Analytics): Array<Feature<FeatureConfigContainer, FeatureConfig>>;
    clearValues(): void;
    getPlayerName: () => Player;
    getPlayerVersion: () => any;
    getCurrentQualityLevelInfo(): QualityLevelInfo | null;
    /**
     * @override
     */
    isLive: () => boolean;
    /**
     * @override
     */
    getMIMEType(): string;
    /**
     * @override
     */
    getStreamURL(): any;
    registerHlsEvents(): void;
    onMediaAttaching(): void;
    onMediaDetaching(): void;
    onManifestLoading(): void;
    getCurrentPlaybackInfo(): PlaybackInfo;
    /**
     * errorData: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }
     * https://hls-js.netlify.com/api-docs/file/src/events.js.html#lineNumber98
     */
    onHlsError(errorName: any, errorData: any): void;
    onAudioTrackSwitched(event: string, data: {
        id: string;
    }): void;
    onSubtitleLanguageSwitched(event: string, data: {
        id: string;
    }): void;
    /**
     * returns mapped error code for Hlsjs ErrorTypes
     * @param type one of the ErrorTypes according to https://github.com/video-dev/hls.js/blob/master/src/errors.ts
     */
    private getErrorCodeFromHlsErrorType;
    private getSelectedAudioLanguage;
    private getSelectedSubtitleLanguage;
}
