import { Analytics } from '../../core/Analytics';
import { Player } from '../../enums/Player';
import { Feature } from '../../features/Feature';
import { FeatureConfig } from '../../features/FeatureConfig';
import { AnalyticsStateMachineOptions } from '../../types/AnalyticsStateMachineOptions';
import { DrmPerformanceInfo } from '../../types/DrmPerformanceInfo';
import { FeatureConfigContainer } from '../../types/FeatureConfigContainer';
import { PlaybackInfo } from '../../types/PlaybackInfo';
import { InternalAdapter } from './InternalAdapter';
import { InternalAdapterAPI } from './InternalAdapterAPI';
export declare class CAFv3InternalAdapter extends InternalAdapter implements InternalAdapterAPI {
    protected context: any;
    private playerManager;
    private queueManager;
    private mediaInformation;
    private activeAudioTrack;
    private activeTextTracks;
    private currentItem;
    private currentItemIndex;
    private isSeeking;
    constructor(context: any, opts?: AnalyticsStateMachineOptions);
    initialize(analytics: Analytics): Array<Feature<FeatureConfigContainer, FeatureConfig>>;
    getPlayerVersion(): string;
    getPlayerName: () => Player;
    getPlayerTech: () => string;
    getAutoPlay: () => any;
    getDrmPerformanceInfo: () => DrmPerformanceInfo | undefined;
    sourceChange(config: any, timestamp: number): void;
    getCurrentPlaybackInfo(): PlaybackInfo;
    register(): void;
    onPaused(currentTime?: number): void;
    protected get currentTime(): number;
}
